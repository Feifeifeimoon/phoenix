// Code generated by protoc-gen-go. DO NOT EDIT.
// source: manage.proto

package manage

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() { proto.RegisterFile("manage.proto", fileDescriptor_519fa8ed5ffbbc8f) }

var fileDescriptor_519fa8ed5ffbbc8f = []byte{
	// 162 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0x4d, 0xcc, 0x4b,
	0x4c, 0x4f, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0xa4, 0xe4, 0xd2, 0xf3,
	0xf3, 0xd3, 0x73, 0x52, 0xf5, 0xc1, 0xa2, 0x49, 0xa5, 0x69, 0xfa, 0xe5, 0x45, 0x89, 0x05, 0x05,
	0xa9, 0x45, 0xc5, 0x10, 0x75, 0x52, 0xd2, 0xe8, 0xf2, 0xa9, 0xb9, 0x05, 0x25, 0x95, 0x10, 0x49,
	0xa3, 0x87, 0x8c, 0x5c, 0xbc, 0xbe, 0x60, 0x73, 0x82, 0x53, 0x8b, 0xca, 0x32, 0x93, 0x53, 0x85,
	0x9c, 0xb9, 0x78, 0x7c, 0x13, 0x2b, 0x9c, 0x73, 0x32, 0x53, 0xf3, 0x4a, 0xfc, 0x4a, 0x73, 0x85,
	0xc4, 0xf4, 0x20, 0xfa, 0xf5, 0x60, 0xfa, 0xf5, 0x5c, 0x41, 0xfa, 0xa5, 0xa4, 0x31, 0xc4, 0x3d,
	0xf3, 0x4a, 0xcc, 0x4c, 0xc2, 0x12, 0x73, 0x4a, 0x53, 0x85, 0xdc, 0xb8, 0xf8, 0x83, 0x53, 0x4b,
	0x50, 0xcc, 0xc1, 0xa7, 0x5e, 0x0a, 0x87, 0x25, 0x20, 0xc7, 0x38, 0x97, 0x16, 0x51, 0xe6, 0x98,
	0x24, 0x36, 0xb0, 0xa0, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x50, 0x5a, 0xb1, 0x8c, 0x3f, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ManageServiceClient is the client API for ManageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ManageServiceClient interface {
	//获取当前最大连接数
	MaxClientNum(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.Int64Value, error)
	//设置最大连接数
	SetMaxClientNum(ctx context.Context, in *wrappers.Int64Value, opts ...grpc.CallOption) (*empty.Empty, error)
	// 当前连接客户端数量
	CurClientNum(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.Int64Value, error)
}

type manageServiceClient struct {
	cc *grpc.ClientConn
}

func NewManageServiceClient(cc *grpc.ClientConn) ManageServiceClient {
	return &manageServiceClient{cc}
}

func (c *manageServiceClient) MaxClientNum(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.Int64Value, error) {
	out := new(wrappers.Int64Value)
	err := c.cc.Invoke(ctx, "/manage.ManageService/MaxClientNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) SetMaxClientNum(ctx context.Context, in *wrappers.Int64Value, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/manage.ManageService/SetMaxClientNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *manageServiceClient) CurClientNum(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*wrappers.Int64Value, error) {
	out := new(wrappers.Int64Value)
	err := c.cc.Invoke(ctx, "/manage.ManageService/CurClientNum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManageServiceServer is the server API for ManageService service.
type ManageServiceServer interface {
	//获取当前最大连接数
	MaxClientNum(context.Context, *empty.Empty) (*wrappers.Int64Value, error)
	//设置最大连接数
	SetMaxClientNum(context.Context, *wrappers.Int64Value) (*empty.Empty, error)
	// 当前连接客户端数量
	CurClientNum(context.Context, *empty.Empty) (*wrappers.Int64Value, error)
}

// UnimplementedManageServiceServer can be embedded to have forward compatible implementations.
type UnimplementedManageServiceServer struct {
}

func (*UnimplementedManageServiceServer) MaxClientNum(ctx context.Context, req *empty.Empty) (*wrappers.Int64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MaxClientNum not implemented")
}
func (*UnimplementedManageServiceServer) SetMaxClientNum(ctx context.Context, req *wrappers.Int64Value) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMaxClientNum not implemented")
}
func (*UnimplementedManageServiceServer) CurClientNum(ctx context.Context, req *empty.Empty) (*wrappers.Int64Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurClientNum not implemented")
}

func RegisterManageServiceServer(s *grpc.Server, srv ManageServiceServer) {
	s.RegisterService(&_ManageService_serviceDesc, srv)
}

func _ManageService_MaxClientNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).MaxClientNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.ManageService/MaxClientNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).MaxClientNum(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_SetMaxClientNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).SetMaxClientNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.ManageService/SetMaxClientNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).SetMaxClientNum(ctx, req.(*wrappers.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _ManageService_CurClientNum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManageServiceServer).CurClientNum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/manage.ManageService/CurClientNum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManageServiceServer).CurClientNum(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _ManageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "manage.ManageService",
	HandlerType: (*ManageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MaxClientNum",
			Handler:    _ManageService_MaxClientNum_Handler,
		},
		{
			MethodName: "SetMaxClientNum",
			Handler:    _ManageService_SetMaxClientNum_Handler,
		},
		{
			MethodName: "CurClientNum",
			Handler:    _ManageService_CurClientNum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "manage.proto",
}
